name: Build and Deploy MAAT CD API to MP

permissions:
  id-token: write
  contents: read

on:
  push:
    branches:
      - "LAWS-3579-cicd"

  workflow_dispatch:

env:
  ECR_SHARED_REGISTRY: 374269020027.dkr.ecr.eu-west-2.amazonaws.com
  APPLICATION_NAME: "maat-cd-api"
  ECR_SHARED_REPOSITORY: "${{ env.APPLICATION_NAME }}-ecr-repo" # TODO Update the ECR names
  SOURCE_APP_TAG: "development"
  SOURCE_IMAGE: "${{ env.ECR_SHARED_REGISTRY }}/${{ env.ECR_SHARED_REPOSITORY }}:${{ env.SOURCE_APP_TAG }}"
  

jobs:

  application-image-build:

    name: application-image-build

    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/nobranch' || github.event_name == 'workflow_dispatch'

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '17'
      - name: Configure AWS credentials - MP
        id: set-ecr-creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          aws-region: eu-west-2
          role-to-assume: arn:aws:iam::580202064026:role/modernisation-platform-oidc-cicd
      - name: Pre-build
        id: tag-image
        run: |
          java -version

          echo "Connecting to ECR"
          aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin ${ECR_SHARED_REGISTRY}

          echo "Pulling in SQS integration test Docker image dependencies"
          docker pull localstack/localstack
          echo "Finished pulling localstack/localstack test dependency"
      - name: Build
        id: build-image
        run: |
          echo "Building the ear file and Docker image with gradle..."
          pushd maat-court-data-api
          chmod +x ./gradlew
          ./gradlew build
          docker build -t maat-cda .
          docker tag maat-cda ${SOURCE_IMAGE}
          popd
      # - name: Post-Build
      #   id: push-image
      #   run: |
      #     echo Pushing the Docker image to... ${SOURCE_IMAGE}
      #     docker push ${SOURCE_IMAGE}

  deploy-to-development:
    name: deploy-to-development
    needs: [application-image-build]
    runs-on: ubuntu-latest
    environment: development
    
    env:
      TASK_DEFINITION_NAME: maat-api-task-definition
      APP_TAG: "development"
      ACCOUNT_ID: "580202064026"

    steps:
      - name: Configure AWS credentials - MP
        id: set-creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          aws-region: eu-west-2
          role-to-assume: arn:aws:iam::${ACCOUNT_ID}:role/modernisation-platform-oidc-cicd
      
      - name: Tag and push image to Amazon ECR
        id: retag-and-push-image
        run: |
          MANIFEST=$(aws ecr batch-get-image --repository-name ${ECR_SHARED_REPOSITORY} --registry-id ${ACCOUNT_ID} --region eu-west-2 --image-ids imageTag=${SOURCE_APP_TAG} --query 'images[].imageManifest' --output text)
          aws ecr put-image --repository-name ${ECR_SHARED_REPOSITORY} --image-tag ${APP_TAG} --registry-id ${ACCOUNT_ID} --image-manifest "$MANIFEST" --region eu-west-2

      - name: Trigger Restart of ECS with new image
        id: run-restart
        run: |
          echo "Restarting the ECS Tasks which will pick up the new images"
          aws ecs update-service --cluster ${APPLICATION_NAME} --service ${APPLICATION_NAME}-ecs-service --force-new-deployment
          