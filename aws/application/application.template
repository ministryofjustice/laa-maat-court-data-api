---
AWSTemplateFormatVersion: '2010-09-09'
Description: LAA Application Load Balancer stack
Parameters:
  # Environment parameters
  pEnvironment:
    Description: Environment (only development, test, staging, uat, production are allowable values)
    Type: String
  pLaunchType:
    Type: String
    Default: FARGATE
    Description: Type of ECS to Launch. EC2 or FARGATE
  pECSRepositoryURL:
    Type: String
  pDockerImageTag:
    Type: String
    Default: ''
  SharedServicesAccount:
    Description: AWS AccountNumber for shared services
    Type: Number
    Default: 902837325998
  pSev5SnsTopicArn:
    Description: ARN of Sev5 SNS topic for alerting
    Type: String
  pMlraAppSecurityGroupId:
    Type: String
    Description: The Security Group Id of the AWS-hosted MLRA application
    Default: ''
  pEnvShortName:
    Type: String
    Description: Environment short name.
    Default: ''

  # Application specific parameters
  pAppName:
    Type: String
    Default: ''
  pAppCertificateArn:
    Type: String
    Default: ''
  pDatasourceUrl:
    Type: String
    Default: ''
  pCloudPlatformQueueRegion:
    Type: String
    Default: ''
  pCreateLinkQueue:
    Type: String
    Default: ''
  pUnlinkQueue:
    Type: String
    Default: ''
  pHearingsResultedQueue:
    Type: String
    Default: ''
  pCdaOauthUrl:
    Type: String
    Default: ''
  pCdaBaseUrl:
    Type: String
    Default: ''
  pPostMvpEnabled:
    Type: String
    Default: ''
  pProsecutionConcludedListenerEnabled:
    Type: String
    Default: ''
  pProsecutionConcludedScheduleEnabled:
    Type: String
    Default: ''
  pCreateLinkCpStatusJobQueue:
    Type: String
    Default: ''
  pLaaProsecutionConcludedQueue:
    Type: String
    Default: ''
  pAwsDefaultRegion:
    Type: String
    Default: ''
  pCloudwatchStep:
    Type: String
    Default: ''
  pCloudwatchBatchSize:
    Type: String
    Default: ''
  pEnableCloudwatchMetrics:
    Type: String
    Default: ''
  pModPlatformVpcCidr:
    Type: String
    Default: ''
    Description: The CIDR of the Modernisation Platform VPC for LAA, as part of migration
  pTogDataUsername:
    Type: String
    Default: ''

  ###### API-Gateway parameters
  pApiScope1:
    Type: String
    Default: standard
    Description: Name of Cognito first scope
  pApiScopeRead:
    Type: String
    Default: read
    Description: Name of read-only Cognito scope
  pApiStageName:
    Type: String
    Default: "v1"
    Description: Stage Name for Api Gateway application
  pAppApiGatewayFQDN:
    Type: String
    Default: ''
    Description: External Api Gateway Url

  # Monitoring parameters
  pECSCPUAlarmThreshold:
    Description: ECS CPU Alarm Threshold
    Type: Number
    Default: '75'
  pECSMemoryAlarmThreshold:
    Description: ECS Memory Alarm Threshold
    Type: Number
    Default: '75'
  pASGCPUAlarmThreshold:
    Description: ASG CPU Alarm Threshold
    Type: Number
    Default: '85'
  pASGStatusFailureAlarmThreshold:
    Description: ASG Status Check Failures Alarm Threshold
    Type: Number
    Default: '1'
  pALBUnhealthyAlarmThreshold:
    Description: ALB Unhealthy Hosts Alarm Threshold
    Type: Number
    Default: '0'
  pALBRejectedAlarmThreshold:
    Description: ALB Rejected Requests Alarm Threshold
    Type: Number
    Default: '10'
  pALB5xxAlarmThreshold:
    Description: ALB Originiating 5xx Alarm Threshold
    Type: Number
    Default: '10'
  pALBTarget5xxAlarmThreshold:
    Description: ALB Target Originiating 5xx Alarm Threshold
    Type: Number
    Default: '10'
  pALB4xxAlarmThreshold:
    Description: ALB Originiating 4xx Alarm Threshold
    Type: Number
    Default: '10'
  pALBTarget4xxAlarmThreshold:
    Description: ALB Target Originiating 4xx Alarm Threshold
    Type: Number
    Default: '10'
  pALBTargetResponseTimeThreshold:
    Description: ALB Target Response Time Alarm Threshold
    Type: Number
    Default: '10'
  pALBTargetResponseTimeThresholdMaximum:
    Description: ALB Target Response Time Alarm Threshold Maximum
    Type: Number
    Default: '60'


Conditions:

  cDevTest:
    !Or
      - !Equals [ !Ref pEnvironment, "development" ]
      - !Equals [ !Ref pEnvironment, "test" ]
  cUATStg:
    !Or
      - !Equals [ !Ref pEnvironment, "uat" ]
      - !Equals [ !Ref pEnvironment, "staging" ]
  cPrd:
    !Equals [ !Ref pEnvironment, "production" ]
  cUATStgProd:
    !Or
      - !Equals [ !Ref pEnvironment, "uat" ]
      - !Equals [ !Ref pEnvironment, "staging" ]
      - !Equals [ !Ref pEnvironment, "production" ]
  cNonProd:
    !Or
      - !Condition cDevTest
      - !Condition cUATStg
  cAddMlraAppSecurityGroupId:
    !Not [ !Equals [ !Ref   pMlraAppSecurityGroupId, "" ] ]

Resources:

  ##############################################################################
  #
  # Security groups
  #
  ##############################################################################
  AppEcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: App ECS Security Group
      VpcId: !ImportValue "env-VpcId"
  AppEcsSecurityGroup1ALBport:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'AppEcsSecurityGroup'
      IpProtocol: tcp
      FromPort: 8090
      ToPort: 8090
      SourceSecurityGroupId: !Ref AppAlbSecurityGroup

  AppAlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: App ALB Security Group
      VpcId: !ImportValue "env-VpcId"
  AppAlbSecurityGroupMlraAppInbound:
    Condition: cAddMlraAppSecurityGroupId
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref AppAlbSecurityGroup
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      SourceSecurityGroupId: !Ref pMlraAppSecurityGroupId
  AppAlbSecurityGroupApiGatewayIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref AppAlbSecurityGroup
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      SourceSecurityGroupId: !Ref AppApiGatewaySecurityGroup
  AppAlbSecurityGroupModPlatformIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref AppAlbSecurityGroup
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: !Ref pModPlatformVpcCidr

  AppApiGatewaySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub 'LAA-${pAppName}-${pEnvironment}-ApiGateway'
      VpcId: !ImportValue env-VpcId

  ##############################################################################
  #
  # Application
  #
  ##############################################################################
  AppEcsCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: !Ref pAppName
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  EcsService:
    Type: AWS::ECS::Service
    DependsOn: AlbHTTPListener
    Properties:
      Cluster: !Ref AppEcsCluster
      LaunchType : !Ref pLaunchType
      DesiredCount: !If [ cDevTest, 1, 2 ]
      HealthCheckGracePeriodSeconds: 120
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref AppEcsSecurityGroup
          Subnets:
            - !ImportValue env-AppPrivateSubnetA
            - !ImportValue env-AppPrivateSubnetB
            - !ImportValue env-AppPrivateSubnetC
      LoadBalancers:
        - ContainerName: !Ref pAppName
          ContainerPort: 8090
          TargetGroupArn: !Ref 'TargetGroup'
      TaskDefinition: !Ref 'TaskDefinition'
  ServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 5
      MinCapacity: !If [ cDevTest, 1, 2 ]
      ResourceId: !Join ['', [service/, !Ref AppEcsCluster, /, !GetAtt EcsService.Name]]
      RoleARN: !GetAtt AutoscalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  ScalingUpPolicyService:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${EcsService}-ScalingUpPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        StepAdjustments:
          - ScalingAdjustment: 1
            MetricIntervalLowerBound: 0
  ScalingDownPolicyService:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${EcsService}-ScalingDownPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        StepAdjustments:
        - ScalingAdjustment: -1
          MetricIntervalUpperBound: 0
  HighCPUServiceAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: CPUUtilization exceeding threshold. Triggers scale up
      ActionsEnabled: true
      Namespace: AWS/ECS
      MetricName: CPUUtilization
      Unit: Percent
      Dimensions:
      - Name: ClusterName
        Value: !Ref AppEcsCluster
      - Name: ServiceName
        Value: !GetAtt EcsService.Name
      Statistic: Average
      Period: 60
      EvaluationPeriods: 3
      Threshold: 70
      AlarmActions: [!Ref ScalingUpPolicyService]
      ComparisonOperator: GreaterThanThreshold
  LowCPUServiceAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: CPUUtilization lower than threshold. Triggers scale down
      ActionsEnabled: true
      Namespace: AWS/ECS
      MetricName: CPUUtilization
      Unit: Percent
      Dimensions:
      - Name: ClusterName
        Value: !Ref AppEcsCluster
      - Name: ServiceName
        Value: !GetAtt EcsService.Name
      Statistic: Average
      Period: 60
      EvaluationPeriods: 3
      Threshold: 20
      AlarmActions: [!Ref ScalingDownPolicyService]
      ComparisonOperator: LessThanThreshold
  # AlbHTTPSListener:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     Certificates:
  #       - CertificateArn: !Ref pAppCertificateArn
  #     DefaultActions:
  #       - Type: forward
  #         TargetGroupArn: !Ref 'TargetGroup'
  #     LoadBalancerArn: !Ref 'LoadBalancer'
  #     Port: 443
  #     Protocol: HTTPS
  # EcsAlbHTTPSListenerRule:
  #   Type: AWS::ElasticLoadBalancingV2::ListenerRule
  #   Properties:
  #     Actions:
  #       - Type: forward
  #         TargetGroupArn: !Ref 'TargetGroup'
  #     Conditions:
  #       - Field: path-pattern
  #         Values: [/]
  #     ListenerArn: !Ref 'AlbHTTPSListener'
  #     Priority: 1

  AlbHTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref 'TargetGroup'
      LoadBalancerArn: !Ref 'LoadBalancer'
      Port: 80
      Protocol: HTTP
  EcsAlbHTTPListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref 'TargetGroup'
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref 'AlbHTTPListener'
      Priority: 1
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LoadBalancer
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: /actuator
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Sub '${pAppName}-TargetGroup'
      Port: 8090
      Protocol: HTTP
      UnhealthyThresholdCount: 3
      VpcId: !ImportValue 'env-VpcId'
      TargetGroupAttributes:
        - Key: 'stickiness.enabled'
          Value: 'false'
        - Key: 'deregistration_delay.timeout_seconds'
          Value: '30'
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${pAppName}-LoadBalancer'
      Scheme: internal
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '65'
      Subnets: [ !ImportValue env-AppPrivateSubnetA, !ImportValue env-AppPrivateSubnetB, !ImportValue env-AppPrivateSubnetC ]
      SecurityGroups:
        - !Ref AppAlbSecurityGroup

  MAATCDADNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue "dns-AwsHostedZoneId"
      Comment: Domain CNAME record for External Application LoadBalancer
      Name: !Join ['.', [!Ref 'pAppName', !ImportValue 'dns-AwsHostedZoneDomainName']]
      Type: CNAME
      TTL: '60'
      ResourceRecords:
      - !GetAtt LoadBalancer.DNSName

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: !Sub '${pAppName}-ecs-TaskExecutionRolePolicy'
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Allow the ECS Tasks to download images from ECR
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
              Resource: !Sub 'arn:aws:ecr:${AWS::Region}:${SharedServicesAccount}:repository/${pAppName}'
            - Effect: Allow
              Action:
                # Allow the ECS tasks to get an Get Authorization Token
                - 'ecr:GetAuthorizationToken'
                # Allow the ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
                # Allow ECS tasks to push metrics to CloudWatch
                - 'cloudwatch:PutMetricData'
                # Allow access to SQS queues.
                - 'sqs:*'
              Resource: '*'
            - Effect: Allow
              Action:
                # Allow ECS to access specific secrets from Parameter Store
                - 'ssm:GetParameters'
              Resource:
                - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/maat-cd-api/*'
                - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/APP_MAATDB_DBPASSWORD_MLA1'
                - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/APP_MAATDB_DBPASSWORD_TOGDATA'
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join [ '', [ !Ref pAppName, '-app' ] ]
      Cpu: !If [ cNonProd, 1024, 1024 ]
      Memory: !If [ cNonProd, 2048, 3072 ]
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - !Ref pLaunchType
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: !Ref pAppName
          Cpu: !If [ cNonProd, 992, 992 ]
          Essential: true
          Image: !Join [':', [!Ref pECSRepositoryURL, !Ref pDockerImageTag ]]
          Memory: !If [ cNonProd, 1792, 2816 ]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'CloudwatchLogsGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Sub '${pAppName}-app'
          PortMappings:
            - ContainerPort: 8090
          Secrets:
            - Name: DATASOURCE_USERNAME
              ValueFrom: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/maat-cd-api/DATASOURCE_USERNAME'
            - Name: DATASOURCE_PASSWORD
              ValueFrom: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/APP_MAATDB_DBPASSWORD_MLA1'
            - Name: CDA_OAUTH_CLIENT_ID
              ValueFrom: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/maat-cd-api/CDA_OAUTH_CLIENT_ID'
            - Name: CDA_OAUTH_CLIENT_SECRET
              ValueFrom: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/maat-cd-api/CDA_OAUTH_CLIENT_SECRET'
            - Name: TOGDATA_DATASOURCE_PASSWORD
              ValueFrom: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/APP_MAATDB_DBPASSWORD_TOGDATA'

          Environment:
            - Name: DATASOURCE_URL
              Value: !Ref pDatasourceUrl
            - Name: CLOUD_PLATFORM_QUEUE_REGION
              Value: !Ref pCloudPlatformQueueRegion
            - Name: CREATE_LINK_QUEUE
              Value: !Ref pCreateLinkQueue
            - Name: UNLINK_QUEUE
              Value: !Ref pUnlinkQueue
            - Name: HEARING_RESULTED_QUEUE
              Value: !Ref pHearingsResultedQueue
            - Name: CDA_OAUTH_URL
              Value: !Ref pCdaOauthUrl
            - Name: CDA_BASE_URL
              Value: !Ref pCdaBaseUrl
            - Name: SENTRY_ENV
              Value: !Ref pEnvironment
            - Name: POST_MVP_ENABLED
              Value: !Ref pPostMvpEnabled
            - Name: PROSECUTION_CONCLUDED_LISTENER_ENABLED
              Value: !Ref pProsecutionConcludedListenerEnabled
            - Name: PROSECUTION_CONCLUDED_SCHEDULE_ENABLED
              Value: !Ref pProsecutionConcludedScheduleEnabled
            - Name: CREATE_LINK_CP_STATUS_JOB_QUEUE
              Value: !Ref pCreateLinkCpStatusJobQueue
            - Name: LAA_PROSECUTION_CONCLUDED_QUEUE
              Value: !Ref pLaaProsecutionConcludedQueue
            - Name: AWS_DEFAULT_REGION
              Value: !Ref pAwsDefaultRegion
            - Name: CLOUDWATCH_STEP
              Value: !Ref pCloudwatchStep
            - Name: CLOUDWATCH_BATCH_SIZE
              Value: !Ref pCloudwatchBatchSize
            - Name: ENABLE_CLOUDWATCH_METRICS
              Value: !Ref pEnableCloudwatchMetrics
            - Name: TOGDATA_DATASOURCE_USERNAME
              Value: !Ref pTogDataUsername


  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '${pAppName}-ECS'
      RetentionInDays: 90

  # Encrypt the Cloudwatch Logs
  # Custom resource as cfn doesn't (yet) support associating KMS keys with log groups
  CloudwatchLogsGroupKeyAssociation:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !ImportValue security-LogGroupLambdaArn
      KeyArn: !ImportValue "security-LogGroupKeyArn"
      LogGroupName: !Ref CloudwatchLogsGroup

  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'application-autoscaling.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: service-autoscaling
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'application-autoscaling:*'
                  - 'cloudwatch:DescribeAlarms'
                  - 'cloudwatch:PutMetricAlarm'
                  - 'ecs:DescribeServices'
                  - 'ecs:UpdateService'
                Resource: '*'

  # API Gateway configuration
  ApiGatewayVpcLink:
    Type: AWS::ApiGatewayV2::VpcLink
    Properties:
      Name: !Sub '${pAppName}_VPC_Link'
      SecurityGroupIds:
        - !Ref AppApiGatewaySecurityGroup
      SubnetIds:
        - !ImportValue env-AppPrivateSubnetA
        - !ImportValue env-AppPrivateSubnetB
        - !ImportValue env-AppPrivateSubnetC
  ApiGatewayCloudwatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '${pAppName}-API-Gateway'
      RetentionInDays: 90
  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub '${pAppName} API Gateway'
      Description: !Sub '${pAppName} API Gateway - HTTP API'
      ProtocolType: HTTP
  ApiIntegration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      ApiId: !Ref ApiGateway
      Description: !Sub '${pAppName} Integration Proxy'
      IntegrationType: HTTP_PROXY
      IntegrationUri: !Ref AlbHTTPListener
      IntegrationMethod: ANY
      ConnectionType: VPC_LINK
      ConnectionId: !Ref ApiGatewayVpcLink
      PayloadFormatVersion: '1.0'
  ApiRoute1:
    Type: 'AWS::ApiGatewayV2::Route'
    DependsOn:
      - ApiIntegration
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: 'ANY /link/validate'
      AuthorizationType: JWT
      AuthorizationScopes:
        - !Sub '${pAppName}/${pApiScope1}'
      AuthorizerId: !Ref ApiAuthorizer
      Target: !Join
        - /
        - - integrations
          - !Ref ApiIntegration
  ApiRouteCrimeMeansAssessment:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: 'ANY /api/internal/v1/{proxy+}'
      AuthorizationType: JWT
      AuthorizationScopes: [!Sub '${pAppName}/${pApiScope1}']
      AuthorizerId: !Ref ApiAuthorizer
      Target: !Join ['/', [integrations, !Ref ApiIntegration]]
  ApiRouteRepOrderGetRequests:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: 'GET /api/internal/v1/assessment/rep-orders/{proxy+}'
      AuthorizationType: JWT
      AuthorizationScopes: [ !Sub '${pAppName}/${pApiScopeRead}' ]
      AuthorizerId: !Ref ApiAuthorizerForGetRequests
      Target: !Join [ '/', [ integrations, !Ref ApiIntegration ] ]
  ApiRouteEformStaging:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: 'ANY /api/eform/{proxy+}'
      AuthorizationType: JWT
      AuthorizationScopes: [ !Sub '${pAppName}/${pApiScope1}' ]
      AuthorizerId: !Ref ApiAuthorizerForATSAndCAA
      Target: !Join [ '/', [ integrations, !Ref ApiIntegration ] ]
  ApiRouteDCESService:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: 'ANY /api/internal/v1/debt-collection-enforcement/{proxy+}'
      AuthorizationType: JWT
      AuthorizationScopes: [ !Sub '${pAppName}/${pApiScope1}' ]
      AuthorizerId: !Ref ApiAuthorizerForDces
      Target: !Join [ '/', [ integrations, !Ref ApiIntegration ] ]
  ApiRouteOpenAPI:
    Type: AWS::ApiGatewayV2::Route
    Condition: cNonProd
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: 'ANY /open-api/{proxy+}'
      AuthorizationType: NONE
      Target: !Join [ '/', [ integrations, !Ref ApiIntegration ] ]
  ApiRouteOpenAPIBaseURL:
    Type: AWS::ApiGatewayV2::Route
    Condition: cNonProd
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: 'ANY /open-api'
      AuthorizationType: NONE
      Target: !Join [ '/', [ integrations, !Ref ApiIntegration ] ]
  ApiAuthorizer:
    Type: 'AWS::ApiGatewayV2::Authorizer'
    Properties:
      Name: !Sub '${pAppName}_Authorizer'
      ApiId: !Ref ApiGateway
      AuthorizerType: JWT  # Json Web Tokens
      IdentitySource:
        - '$request.header.Authorization'
      JwtConfiguration:
        Audience:
          - !Ref CognitoUserPoolClient
          - !Ref CognitoUserPoolClientCda
          - !Ref CognitoUserPoolClientCrimeMeansAssessment
          - !Ref CognitoUserPoolClientCrownCourtProceeding
          - !Ref CognitoUserPoolClientCrownCourtContribution
          - !Ref CognitoUserPoolClientCrimeEvidence
          - !Ref CognitoUserPoolCrimeHardshipService
          - !Ref CognitoUserPoolMAATOrchestrationService
          - !Ref CognitoUserPoolClientCrimeValidationService
          - !Ref CognitoUserPoolClientATSService
        Issuer: !GetAtt CognitoUserPool.ProviderURL
  ApiAuthorizerForDces:
    Type: 'AWS::ApiGatewayV2::Authorizer'
    Properties:
      Name: !Sub '${pAppName}_DCES_Authorizer'
      ApiId: !Ref ApiGateway
      AuthorizerType: JWT  # Json Cognito Web Tokens
      IdentitySource:
        - '$request.header.Authorization'
      JwtConfiguration:
        Audience:
          - !Ref CognitoUserPoolClientDcesReportService
          - !Ref CognitoUserPoolClientDcesDrcReportService
        Issuer: !GetAtt CognitoUserPool.ProviderURL
  ApiAuthorizerForGetRequests:
    Type: 'AWS::ApiGatewayV2::Authorizer'
    Properties:
      Name: !Sub '${pAppName}_GET_Request_Authorizer'
      ApiId: !Ref ApiGateway
      AuthorizerType: JWT  # Json Cognito Web Tokens
      IdentitySource:
        - '$request.header.Authorization'
      JwtConfiguration:
        Audience:
          - !Ref CognitoUserPoolClientClaimForCrownCourtDefence
        Issuer: !GetAtt CognitoUserPool.ProviderURL
  ApiAuthorizerForATSAndCAA:
    Type: 'AWS::ApiGatewayV2::Authorizer'
    Properties:
      Name: !Sub '${pAppName}_ATS_And_CAA_Authorizer'
      ApiId: !Ref ApiGateway
      AuthorizerType: JWT  # Json Cognito Web Tokens
      IdentitySource:
        - '$request.header.Authorization'
      JwtConfiguration:
        Audience:
          - !Ref CognitoUserPoolClientCrimeApplyAdaptor
          - !Ref CognitoUserPoolClientATSService
        Issuer: !GetAtt CognitoUserPool.ProviderURL
  ApiStage:
    Type: 'AWS::ApiGatewayV2::Stage'
    Properties:
      StageName: !Ref pApiStageName
      Description: !Sub '${pAppName} ${pApiStageName} Stage'
      ApiId: !Ref ApiGateway
      AutoDeploy: true
      AccessLogSettings:
       DestinationArn: !GetAtt ApiGatewayCloudwatchLogGroup.Arn
       Format: >-
        {"requestId":"$context.requestId","extendedRequestId":"$context.extendedRequestId","ip":"$context.identity.sourceIp","clientId":"$context.authorizer.claims.client_id","requestTime":"$context.requestTime","routeKey":"$context.routeKey","status":"$context.status"}
  ApiExternalDomainName:
    Type: 'AWS::ApiGatewayV2::DomainName'
    Properties:
      DomainName: !Ref pAppApiGatewayFQDN
      DomainNameConfigurations:
        - EndpointType: Regional
          CertificateArn: !Ref pAppCertificateArn
          CertificateName: '-'
  ApiExternalDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue "dns-HostedZoneId"
      Comment: Domain CNAME record for External Api Gateway
      Name: !Ref pAppApiGatewayFQDN
      Type: CNAME
      TTL: '60'
      ResourceRecords:
      - !GetAtt ApiExternalDomainName.RegionalDomainName
  ApiMapping:
    Type: 'AWS::ApiGatewayV2::ApiMapping'
    DependsOn: ApiExternalDomainName
    Properties:
      DomainName: !Ref pAppApiGatewayFQDN
      ApiId: !Ref ApiGateway
      Stage: !Ref ApiStage

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub '${pAppName}-UserPool'
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: CognitoUserPoolResourceServer1
    Properties:
      ClientName: "DEFAULT"
      UserPoolId: !Ref CognitoUserPool
      AllowedOAuthFlowsUserPoolClient: true
      GenerateSecret: true
      SupportedIdentityProviders: [COGNITO]
      AllowedOAuthFlows: [client_credentials]
      AllowedOAuthScopes:
        - !Sub '${pAppName}/${pApiScope1}'
      PreventUserExistenceErrors: ENABLED
      ExplicitAuthFlows:
        - "ALLOW_REFRESH_TOKEN_AUTH"
  CognitoUserPoolClientCda:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: CognitoUserPoolResourceServer1
    Properties:
      ClientName: "CDA"
      UserPoolId: !Ref CognitoUserPool
      AllowedOAuthFlowsUserPoolClient: true
      GenerateSecret: true
      SupportedIdentityProviders: [COGNITO]
      AllowedOAuthFlows: [client_credentials]
      AllowedOAuthScopes:
        - !Sub '${pAppName}/${pApiScope1}'
      PreventUserExistenceErrors: ENABLED
      ExplicitAuthFlows:
        - "ALLOW_REFRESH_TOKEN_AUTH"
  CognitoUserPoolClientCrimeMeansAssessment:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: CognitoUserPoolResourceServer1
    Properties:
      ClientName: "Crime Means Assessment"
      UserPoolId: !Ref CognitoUserPool
      AllowedOAuthFlowsUserPoolClient: true
      GenerateSecret: true
      SupportedIdentityProviders: [COGNITO]
      AllowedOAuthFlows: [client_credentials]
      AllowedOAuthScopes: [!Sub '${pAppName}/${pApiScope1}']
      PreventUserExistenceErrors: ENABLED
      ExplicitAuthFlows:
        - 'ALLOW_REFRESH_TOKEN_AUTH'
  CognitoUserPoolClientCrownCourtProceeding:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: CognitoUserPoolResourceServer1
    Properties:
      ClientName: "Crown Court Proceeding"
      UserPoolId: !Ref CognitoUserPool
      AllowedOAuthFlowsUserPoolClient: true
      GenerateSecret: true
      SupportedIdentityProviders: [COGNITO]
      AllowedOAuthFlows: [client_credentials]
      AllowedOAuthScopes: [!Sub '${pAppName}/${pApiScope1}']
      PreventUserExistenceErrors: ENABLED
      ExplicitAuthFlows:
        - 'ALLOW_REFRESH_TOKEN_AUTH'
  CognitoUserPoolClientCrownCourtContribution:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: CognitoUserPoolResourceServer1
    Properties:
      ClientName: "Crown Court Contribution"
      UserPoolId: !Ref CognitoUserPool
      AllowedOAuthFlowsUserPoolClient: true
      GenerateSecret: true
      SupportedIdentityProviders: [COGNITO]
      AllowedOAuthFlows: [client_credentials]
      AllowedOAuthScopes: [!Sub '${pAppName}/${pApiScope1}']
      PreventUserExistenceErrors: ENABLED
      ExplicitAuthFlows:
        - 'ALLOW_REFRESH_TOKEN_AUTH'
  CognitoUserPoolClientCrimeEvidence:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: CognitoUserPoolResourceServer1
    Properties:
      ClientName: "Crime Evidence"
      UserPoolId: !Ref CognitoUserPool
      AllowedOAuthFlowsUserPoolClient: true
      GenerateSecret: true
      SupportedIdentityProviders: [COGNITO]
      AllowedOAuthFlows: [client_credentials]
      AllowedOAuthScopes: [!Sub '${pAppName}/${pApiScope1}']
      PreventUserExistenceErrors: ENABLED
      ExplicitAuthFlows:
        - 'ALLOW_REFRESH_TOKEN_AUTH'
  CognitoUserPoolClientCrimeApplyAdaptor:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: CognitoUserPoolResourceServer1
    Properties:
      ClientName: "Crime Apply Adapter"
      UserPoolId: !Ref CognitoUserPool
      AllowedOAuthFlowsUserPoolClient: true
      GenerateSecret: true
      SupportedIdentityProviders: [ COGNITO ]
      AllowedOAuthFlows: [ client_credentials ]
      AllowedOAuthScopes: [ !Sub '${pAppName}/${pApiScope1}' ]
      PreventUserExistenceErrors: ENABLED
      ExplicitAuthFlows:
        - 'ALLOW_REFRESH_TOKEN_AUTH'
  CognitoUserPoolClientATSService:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: CognitoUserPoolResourceServer1
    Properties:
      ClientName: "Application Tracking Service"
      UserPoolId: !Ref CognitoUserPool
      AllowedOAuthFlowsUserPoolClient: true
      GenerateSecret: true
      SupportedIdentityProviders: [ COGNITO ]
      AllowedOAuthFlows: [ client_credentials ]
      AllowedOAuthScopes: [ !Sub '${pAppName}/${pApiScope1}' ]
      PreventUserExistenceErrors: ENABLED
      ExplicitAuthFlows:
        - 'ALLOW_REFRESH_TOKEN_AUTH'
  CognitoUserPoolClientDcesReportService:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: CognitoUserPoolResourceServer1
    Properties:
      ClientName: "DCES Debt collection Report Service"
      UserPoolId: !Ref CognitoUserPool
      AllowedOAuthFlowsUserPoolClient: true
      GenerateSecret: true
      SupportedIdentityProviders: [ COGNITO ]
      AllowedOAuthFlows: [ client_credentials ]
      AllowedOAuthScopes: [ !Sub '${pAppName}/${pApiScope1}' ]
      PreventUserExistenceErrors: ENABLED
      ExplicitAuthFlows:
        - 'ALLOW_REFRESH_TOKEN_AUTH'
  CognitoUserPoolClientDcesDrcReportService:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: CognitoUserPoolResourceServer1
    Properties:
      ClientName: "DCES DRC Integration Report Service"
      UserPoolId: !Ref CognitoUserPool
      AllowedOAuthFlowsUserPoolClient: true
      GenerateSecret: true
      SupportedIdentityProviders: [ COGNITO ]
      AllowedOAuthFlows: [ client_credentials ]
      AllowedOAuthScopes: [ !Sub '${pAppName}/${pApiScope1}' ]
      PreventUserExistenceErrors: ENABLED
      ExplicitAuthFlows:
        - 'ALLOW_REFRESH_TOKEN_AUTH'
  CognitoUserPoolCrimeHardshipService:
        Type: AWS::Cognito::UserPoolClient
        DependsOn: CognitoUserPoolResourceServer1
        Properties:
          ClientName: "Crime Hardship Service"
          UserPoolId: !Ref CognitoUserPool
          AllowedOAuthFlowsUserPoolClient: true
          GenerateSecret: true
          SupportedIdentityProviders: [ COGNITO ]
          AllowedOAuthFlows: [ client_credentials ]
          AllowedOAuthScopes: [ !Sub '${pAppName}/${pApiScope1}' ]
          PreventUserExistenceErrors: ENABLED
          ExplicitAuthFlows:
            - 'ALLOW_REFRESH_TOKEN_AUTH'
  CognitoUserPoolClientCrimeValidationService:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: CognitoUserPoolResourceServer1
    Properties:
      ClientName: "Crime Validation Service"
      UserPoolId: !Ref CognitoUserPool
      AllowedOAuthFlowsUserPoolClient: true
      GenerateSecret: true
      SupportedIdentityProviders: [ COGNITO ]
      AllowedOAuthFlows: [ client_credentials ]
      AllowedOAuthScopes: [ !Sub '${pAppName}/${pApiScope1}' ]
      PreventUserExistenceErrors: ENABLED
      ExplicitAuthFlows:
        - 'ALLOW_REFRESH_TOKEN_AUTH'
  CognitoUserPoolClientClaimForCrownCourtDefence:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: CognitoUserPoolResourceServer1
    Properties:
      ClientName: "Claim for Crown Court Defence"
      UserPoolId: !Ref CognitoUserPool
      AllowedOAuthFlowsUserPoolClient: true
      GenerateSecret: true
      SupportedIdentityProviders: [ COGNITO ]
      AllowedOAuthFlows: [ client_credentials ]
      AllowedOAuthScopes: [ !Sub '${pAppName}/${pApiScopeRead}' ]
      PreventUserExistenceErrors: ENABLED
      ExplicitAuthFlows:
        - 'ALLOW_REFRESH_TOKEN_AUTH'
  CognitoUserPoolMAATOrchestrationService:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: CognitoUserPoolResourceServer1
    Properties:
      ClientName: "MAAT Orchestration Service"
      UserPoolId: !Ref CognitoUserPool
      AllowedOAuthFlowsUserPoolClient: true
      GenerateSecret: true
      SupportedIdentityProviders: [ COGNITO ]
      AllowedOAuthFlows: [ client_credentials ]
      AllowedOAuthScopes: [ !Sub '${pAppName}/${pApiScope1}' ]
      PreventUserExistenceErrors: ENABLED
      ExplicitAuthFlows:
        - 'ALLOW_REFRESH_TOKEN_AUTH'
  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref CognitoUserPool
      Domain: !Sub '${pAppName}-${pEnvShortName}'
  CognitoUserPoolResourceServer1:
    Type: AWS::Cognito::UserPoolResourceServer
    Properties:
      UserPoolId: !Ref CognitoUserPool
      Identifier: !Ref pAppName
      Name: !Sub '${pAppName}-ResourceServer1'
      Scopes:
       - ScopeName: !Ref pApiScope1
         ScopeDescription: !Sub '${pAppName}/${pApiScope1}'


  ##############################################################################
  #
  # Monitoring
  #
  ##############################################################################
  # ECS cluster alerting
  EcsCPUoverThreshold:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: !Join
        - " | "
        - - !Ref pAppName
          - ECS-CPU-high-threshold-alarm1
      AlarmDescription: >-
        If the CPU exceeds the predefined threshold, this alarm will trigger.
        Please investigate.
      Namespace: AWS/ECS
      MetricName: CPUUtilization
      Statistic: Average
      Period: 60
      EvaluationPeriods: 5
      Threshold: !Ref pECSCPUAlarmThreshold
      TreatMissingData: breaching
      AlarmActions:
        - !Ref pSev5SnsTopicArn
      OKActions:
        - !Ref pSev5SnsTopicArn
      Unit: Percent
      Dimensions:
        - Name: ClusterName
          Value: !Ref AppEcsCluster
        - Name: ServiceName
          Value: !GetAtt EcsService.Name
      ComparisonOperator: GreaterThanThreshold

  EcsMemoryOverThreshold:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: !Join
        - " | "
        - - !Ref pAppName
          - ECS-Memory-high-threshold-alarm
      AlarmDescription: >-
        If the memory util exceeds the predefined threshold, this alarm will trigger.
        Please investigate.
      Namespace: AWS/ECS
      MetricName: MemoryUtilization
      Statistic: Average
      Period: 60
      EvaluationPeriods: 5
      Threshold: !Ref pECSMemoryAlarmThreshold
      TreatMissingData: breaching
      AlarmActions:
        - !Ref pSev5SnsTopicArn
      OKActions:
        - !Ref pSev5SnsTopicArn
      Unit: Percent
      Dimensions:
        - Name: ClusterName
          Value: !Ref AppEcsCluster
        - Name: ServiceName
          Value: !GetAtt EcsService.Name
      ComparisonOperator: GreaterThanThreshold

  # Application Load Balancer Alerting
  TargetResponseTime:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: !Join
        - " | "
        - - !Ref pAppName
          - alb-target-response-time-alarm
      AlarmDescription: >-
        The time elapsed, in seconds, after the request leaves the load balancer until a response from the target is received
      Namespace: AWS/ApplicationELB
      MetricName: TargetResponseTime
      ExtendedStatistic: p99
      Period: 60
      EvaluationPeriods: 5
      Threshold: !Ref pALBTargetResponseTimeThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref pSev5SnsTopicArn
      OKActions:
        - !Ref pSev5SnsTopicArn
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt LoadBalancer.LoadBalancerFullName
      ComparisonOperator: GreaterThanThreshold

  TargetResponseTimeMaximum:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: !Join
        - " | "
        - - !Ref pAppName
          - alb-target-response-time-alarm-maximum
      AlarmDescription: >-
        The time elapsed, in seconds, after the request leaves the load balancer until a response from the target is received. Triggered if response is longer than 60s.
      Namespace: AWS/ApplicationELB
      MetricName: TargetResponseTime
      Statistic: Maximum
      Period: 60
      EvaluationPeriods: 1
      Threshold: !Ref pALBTargetResponseTimeThresholdMaximum
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref pSev5SnsTopicArn
      OKActions:
        - !Ref pSev5SnsTopicArn
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt LoadBalancer.LoadBalancerFullName
      ComparisonOperator: GreaterThanThreshold

  UnHealthyHosts:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: !Join
        - " | "
        - - !Ref pAppName
          - unhealthy-hosts-alarm
      AlarmDescription: >-
        The unhealthy hosts alarm triggers if your load balancer recognises there is an unhealthy host and has been there for over 15 minutes.
      Namespace: AWS/ApplicationELB
      MetricName: UnHealthyHostCount
      Statistic: Average
      Period: 60
      EvaluationPeriods: 5
      Threshold: !Ref pALBUnhealthyAlarmThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref pSev5SnsTopicArn
      OKActions:
        - !Ref pSev5SnsTopicArn
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt LoadBalancer.LoadBalancerFullName
        - Name: TargetGroup
          Value: !GetAtt TargetGroup.TargetGroupFullName
      ComparisonOperator: GreaterThanThreshold

  RejectedConnectionCount:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: !Join
        - " | "
        - - !Ref pAppName
          - RejectedConnectionCount-alarm
      AlarmDescription: >-
        There is no surge queue on ALB's. Alert triggers in ALB rejects too many requests, usually due to backend being busy.
      Namespace: AWS/ApplicationELB
      MetricName: RejectedConnectionCount
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 5
      Threshold: !Ref pALBRejectedAlarmThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref pSev5SnsTopicArn
      OKActions:
        - !Ref pSev5SnsTopicArn
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt LoadBalancer.LoadBalancerFullName
      ComparisonOperator: GreaterThanThreshold

  http5xxError:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: !Join
        - " | "
        - - !Ref pAppName
          - http-5xx-error-alarm
      AlarmDescription: >-
        This alarm will trigger if we receive 4 5XX http alerts in a 5 minute period.
      Namespace: AWS/ApplicationELB
      MetricName: HTTPCode_Target_5XX_Count
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 5
      Threshold: !Ref pALBTarget5xxAlarmThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref pSev5SnsTopicArn
      OKActions:
        - !Ref pSev5SnsTopicArn
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt LoadBalancer.LoadBalancerFullName
      ComparisonOperator: GreaterThanThreshold

  ApplicationELB5xxError:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: !Join
        - " | "
        - - !Ref pAppName
          - elb-5xx-error-alarm
      AlarmDescription: >-
        This alarm will trigger if we receive 4 5XX elb alerts in a 5 minute period.
      Namespace: AWS/ApplicationELB
      MetricName: HTTPCode_ELB_5XX_Count
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 5
      Threshold: !Ref pALB5xxAlarmThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref pSev5SnsTopicArn
      OKActions:
        - !Ref pSev5SnsTopicArn
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt LoadBalancer.LoadBalancerFullName
      ComparisonOperator: GreaterThanThreshold

  http4xxError:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: !Join
        - " | "
        - - !Ref pAppName
          - http-4xx-error-alarm
      AlarmDescription: >-
        This alarm will trigger if we receive 4 4XX http alerts in a 5 minute period.
      Namespace: AWS/ApplicationELB
      MetricName: HTTPCode_Target_4XX_Count
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 5
      Threshold: !Ref pALBTarget4xxAlarmThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref pSev5SnsTopicArn
      OKActions:
        - !Ref pSev5SnsTopicArn
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt LoadBalancer.LoadBalancerFullName
      ComparisonOperator: GreaterThanThreshold

  ApplicationELB4xxError:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: !Join
        - " | "
        - - !Ref pAppName
          - elb-4xx-error-alarm
      AlarmDescription: >-
        This alarm will trigger if we receive 4 4XX elb alerts in a 5 minute period.
      Namespace: AWS/ApplicationELB
      MetricName: HTTPCode_ELB_4XX_Count
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 5
      Threshold: !Ref pALB4xxAlarmThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref pSev5SnsTopicArn
      OKActions:
        - !Ref pSev5SnsTopicArn
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt LoadBalancer.LoadBalancerFullName
      ComparisonOperator: GreaterThanThreshold

  # Dashboard creation and configuration
  CCMSPDADashboard:
    DependsOn: [ApplicationELB4xxError, TargetResponseTime, http4xxError, ApplicationELB5xxError, http5xxError, RejectedConnectionCount, UnHealthyHosts, EcsMemoryOverThreshold, EcsCPUoverThreshold]
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Join
          - '-'
          - - !Ref pAppName
            - Dashboard
      DashboardBody: !Sub |
        {
          "widgets" : [
            {
              "type" : "metric",
              "x" : 0,
              "y" : 0,
              "width" : 8,
              "height" : 6,
              "properties" : {
                  "title" : "Application ELB 5xx Error",
                  "annotations": {
                    "alarms": [
                      "arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:${ApplicationELB5xxError}"
                    ]
                  },
                  "view": "timeSeries",
                  "region": "${AWS::Region}",
                  "stacked": false
              }
            },
            {
              "type" : "metric",
              "x" : 8,
              "y" : 0,
              "width" : 8,
              "height" : 6,
              "properties" : {
                  "title" : "Application ELB 4xx Error",
                  "annotations": {
                    "alarms": [
                      "arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:${ApplicationELB4xxError}"
                    ]
                  },
                  "view": "timeSeries",
                  "region": "${AWS::Region}",
                  "stacked": false
              }
            },
            {
              "type" : "metric",
              "x" : 16,
              "y" : 0,
              "width" : 8,
              "height" : 6,
              "properties" : {
                  "title" : "Application ELB Target Response Time",
                  "annotations": {
                    "alarms": [
                      "arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:${TargetResponseTime}"
                    ]
                  },
                  "view": "timeSeries",
                  "region": "${AWS::Region}",
                  "stacked": false
              }
            },
            {
              "type" : "metric",
              "x" : 0,
              "y" : 12,
              "width" : 12,
              "height" : 6,
              "properties" : {
                  "title" : "ECS CPU",
                  "annotations": {
                    "alarms": [
                      "arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:${EcsCPUoverThreshold}"
                    ]
                  },
                  "view": "timeSeries",
                  "region": "${AWS::Region}",
                  "stacked": false
              }
            },
            {
              "type" : "metric",
              "x" : 12,
              "y" : 12,
              "width" : 12,
              "height" : 6,
              "properties" : {
                  "title" : "ECS Memory",
                  "annotations": {
                    "alarms": [
                      "arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:${EcsMemoryOverThreshold}"
                    ]
                  },
                  "view": "timeSeries",
                  "region": "${AWS::Region}",
                  "stacked": false
              }
            }
          ]
        }

Outputs:
  LoadBalancerDNSName:
    Description: Your ALB DNS URL
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: !Sub "${pAppName}-LoadBalancerDNSName"
