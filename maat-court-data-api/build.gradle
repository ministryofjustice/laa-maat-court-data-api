plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version "$springframeworkBootVersion"
    id 'io.spring.dependency-management' version "$springDependencyManagementVersion"
    id 'com.javiersc.semver.project' version "$semverVersion"
    id 'com.gorylenko.gradle-git-properties' version "$gitPropertiesVersion"
    id 'org.sonarqube' version "$sonarQubeVersion"
    id 'info.solidsoft.pitest' version "$pitestVersion"
}

group = 'gov.uk'
description = 'This is a Facade application to the existing LAA legacy Applications MAAT/MLRA.'

java {
    sourceCompatibility = "$javaVersion"
    targetCompatibility = "$javaVersion"
}

sourceSets {
    testSqsIntegration {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    testSqsIntegrationImplementation.extendsFrom implementation
}

gitProperties {
    failOnNoGitDirectory = false
    dotGitDirectory = file("${project.rootDir}/../.git")
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://s01.oss.sonatype.org/content/repositories/snapshots/"
    }
}

dependencies {

    implementation platform("io.sentry:sentry-bom:$sentryBomVersion")

    implementation "uk.gov.justice.service.laa-crime:crime-commons-spring-boot-starter-rest-client:$commonsRestClient:all"
    implementation "uk.gov.justice.service.laa-crime:crime-commons-classes:$crimeCommonsClasses"
    implementation "uk.gov.justice.service.laa-crime:crime-commons-mod-schemas:$commonsModSchemas"

    //Required for Logback configuration due to a dependency having their own implementation of SAXParserFactory
    implementation "xerces:xercesImpl:$xercesImplVersion"

    // Spring
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security'
    implementation group: 'org.springframework.boot', name: 'spring-boot-autoconfigure'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-activemq'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-graphql'


    implementation "io.awspring.cloud:spring-cloud-aws-starter-sqs:$springAwsCloudVersion"
    implementation 'org.springframework:spring-jms'
    implementation "com.amazonaws:amazon-sqs-java-messaging-lib:$amazonSQSVersion"

    implementation "software.amazon.awssdk:sts:$awsStsVersion"

    implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: "$springdocVersion"
    implementation group: 'io.projectreactor.netty', name: 'reactor-netty'
    implementation group: 'commons-io', name: 'commons-io', version: "$commonsIOVersion"

    annotationProcessor 'org.projectlombok:lombok'
    implementation "org.mapstruct:mapstruct:$mapstructVersion"
    annotationProcessor "org.mapstruct:mapstruct-processor:$mapstructVersion"
    //Required for lombok version > 1.18.16
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:$lombokMapStrutBinding"

    implementation "io.micrometer:micrometer-registry-cloudwatch2:$micrometerCloudWatchVersion"

    // DB Dependencies
    implementation group: 'com.oracle.database.jdbc', name: 'ojdbc8', version: "$ojdbc8Version"
    implementation group: 'com.oracle.database.xml', name: 'xmlparserv2', version: "$oracleXMLParserVersion"
    implementation group: 'com.oracle.database.xml', name: 'xdb', version: "$oracleXMLParserVersion"

    annotationProcessor group: 'org.hibernate', name: 'hibernate-jpamodelgen', version: "$hibernateJpaModelGen"
    implementation group: 'com.graphql-java-kickstart', name: 'graphql-java-tools', version: "$graphqlJavaTools"

    implementation group: 'com.google.code.gson', name: 'gson', version: "$gsonVersion"
    implementation group: 'org.hibernate.orm', name: 'hibernate-core', version: "$hibernateCore"

    // Test Only
    testImplementation "org.pitest:pitest:$pitest"
    testImplementation group: 'com.h2database', name: 'h2', version: "$h2DBVersion"
    testImplementation "org.mockito:mockito-inline:$mockitoInlineVersion"
    testImplementation group: 'org.hamcrest', name: 'hamcrest-all', version: "$harmcrestVersion"
    testImplementation group: 'org.easytesting', name: 'fest-assert', version: "$festVersion"
    testCompileOnly group: 'org.projectlombok', name: 'lombok'
    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok'
    testImplementation "org.springframework.cloud:spring-cloud-starter-contract-stub-runner:$springCloudStubRunnerVersion"

    // Only required for SQS Integration test
    testSqsIntegrationImplementation "org.awaitility:awaitility:$awaitilityVersion"
    testSqsIntegrationImplementation group: 'com.amazonaws', name: 'aws-java-sdk', version: "$awsJavaSdkVersion"
    testSqsIntegrationImplementation group: 'com.amazonaws', name: 'aws-java-sdk-sqs', version: "$awsJavaSdkVersion"
    testSqsIntegrationImplementation "org.testcontainers:junit-jupiter:$testcontainersJunitJupiterVersion"
    testSqsIntegrationImplementation "org.testcontainers:localstack:$testcontainersLocalstackVersion"
    testSqsIntegrationImplementation "cloud.localstack:localstack-utils:$cloudLocalstackUtilsVersion"
    testSqsIntegrationImplementation 'com.h2database:h2'
    testSqsIntegrationImplementation "org.springframework.cloud:spring-cloud-starter-contract-stub-runner:$springContractStubRunnerVersion"
}

jacoco {
    toolVersion = "0.8.8"
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "**/entity/**",
                    "**/dto/**",
                    "**/config/**",
                    "**/dao/**"
            ])
        }))
    }
}

task testSqsIntegration(type: Test) {
    useJUnitPlatform()
    testClassesDirs = sourceSets.testSqsIntegration.output.classesDirs
    classpath = sourceSets.testSqsIntegration.runtimeClasspath
}

check.dependsOn testSqsIntegration

pitest {
    targetClasses = ['gov.uk.courtdata.link.*', 'gov.uk.courtdata.unlink.*', 'gov.uk.courtdata.laastatus.*', 'gov.uk.courtdata.hearing.*', 'gov.uk.courtdata.dao.*']
    excludedClasses = ['gov.uk.courtdata.hearing.dto.*', 'gov.uk.courtdata.hearing.mapper.*', 'gov.uk.courtdata.laastatus.client.*', 'gov.uk.courtdata.dao.convertor.*', 'gov.uk.courtdata.dao.oracle.*']
    threads = 5
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    mutationThreshold = 60
}